// Mocks generated by Mockito 5.0.15 from annotations
// in relaxation/test/core/shared/shared_mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:fpdart/fpdart.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:relaxation/core/error/failures.dart' as _i6;
import 'package:relaxation/core/utils.dart' as _i9;
import 'package:relaxation/features/data_query_feature/data/datasources/audio_query_datasource.dart'
    as _i8;
import 'package:relaxation/features/data_query_feature/data/models/models.dart'
    as _i3;
import 'package:relaxation/features/data_query_feature/domain/entities/entities.dart'
    as _i7;
import 'package:relaxation/features/data_query_feature/domain/repositories/audio_query_repository.dart'
    as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

// ignore: camel_case_types
class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

// ignore: camel_case_types
class _FakeSongInfoModel_1 extends _i1.Fake implements _i3.SongInfoModel {}

// ignore: camel_case_types
class _FakeAlbumInfoModel_2 extends _i1.Fake implements _i3.AlbumInfoModel {}

// ignore: camel_case_types
class _FakePlaylistInfoModel_3 extends _i1.Fake
    implements _i3.PlaylistInfoModel {}

/// A class which mocks [AudioQueryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioQueryRepository extends _i1.Mock
    implements _i4.AudioQueryRepository {
  MockAudioQueryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.SongInfo>> getSong({String? id}) =>
      (super.noSuchMethod(Invocation.method(#getSong, [], {#id: id}),
              returnValue: Future<_i2.Either<_i6.Failure, _i7.SongInfo>>.value(
                  _FakeEither_0<_i6.Failure, _i7.SongInfo>()))
          as _i5.Future<_i2.Either<_i6.Failure, _i7.SongInfo>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.AlbumInfo>> getAlbum({String? id}) =>
      (super.noSuchMethod(Invocation.method(#getAlbum, [], {#id: id}),
              returnValue: Future<_i2.Either<_i6.Failure, _i7.AlbumInfo>>.value(
                  _FakeEither_0<_i6.Failure, _i7.AlbumInfo>()))
          as _i5.Future<_i2.Either<_i6.Failure, _i7.AlbumInfo>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.SongInfo>>> getAllSongs() =>
      (super.noSuchMethod(Invocation.method(#getAllSongs, []),
              returnValue:
                  Future<_i2.Either<_i6.Failure, List<_i7.SongInfo>>>.value(
                      _FakeEither_0<_i6.Failure, List<_i7.SongInfo>>()))
          as _i5.Future<_i2.Either<_i6.Failure, List<_i7.SongInfo>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.SongInfo>>> getSongsByAlbum(
          {String? albumid}) =>
      (super.noSuchMethod(
              Invocation.method(#getSongsByAlbum, [], {#albumid: albumid}),
              returnValue:
                  Future<_i2.Either<_i6.Failure, List<_i7.SongInfo>>>.value(
                      _FakeEither_0<_i6.Failure, List<_i7.SongInfo>>()))
          as _i5.Future<_i2.Either<_i6.Failure, List<_i7.SongInfo>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.SongInfo>>> getSongsByPlaylist(
          {_i7.PlaylistInfo? playlistInfo}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getSongsByPlaylist, [], {#playlistInfo: playlistInfo}),
              returnValue:
                  Future<_i2.Either<_i6.Failure, List<_i7.SongInfo>>>.value(
                      _FakeEither_0<_i6.Failure, List<_i7.SongInfo>>()))
          as _i5.Future<_i2.Either<_i6.Failure, List<_i7.SongInfo>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.SongInfo>>> searchAllSongs(
          {String? queryString}) =>
      (super.noSuchMethod(
          Invocation.method(#searchAllSongs, [], {#queryString: queryString}),
          returnValue:
              Future<_i2.Either<_i6.Failure, List<_i7.SongInfo>>>.value(
                  _FakeEither_0<_i6.Failure, List<_i7.SongInfo>>())) as _i5
          .Future<_i2.Either<_i6.Failure, List<_i7.SongInfo>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.AlbumInfo>>> getAllAlbums() =>
      (super.noSuchMethod(Invocation.method(#getAllAlbums, []),
              returnValue:
                  Future<_i2.Either<_i6.Failure, List<_i7.AlbumInfo>>>.value(
                      _FakeEither_0<_i6.Failure, List<_i7.AlbumInfo>>()))
          as _i5.Future<_i2.Either<_i6.Failure, List<_i7.AlbumInfo>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.AlbumInfo>>> searchAllAlbums(
          {String? queryString}) =>
      (super.noSuchMethod(
          Invocation.method(#searchAllAlbums, [], {#queryString: queryString}),
          returnValue:
              Future<_i2.Either<_i6.Failure, List<_i7.AlbumInfo>>>.value(
                  _FakeEither_0<_i6.Failure, List<_i7.AlbumInfo>>())) as _i5
          .Future<_i2.Either<_i6.Failure, List<_i7.AlbumInfo>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.PlaylistInfo>>>
      getAllPlaylists() => (super.noSuchMethod(
              Invocation.method(#getAllPlaylists, []),
              returnValue:
                  Future<_i2.Either<_i6.Failure, List<_i7.PlaylistInfo>>>.value(
                      _FakeEither_0<_i6.Failure, List<_i7.PlaylistInfo>>()))
          as _i5.Future<_i2.Either<_i6.Failure, List<_i7.PlaylistInfo>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, void>> addSongToPlaylist(
          {_i7.PlaylistInfo? playlistInfo, _i7.SongInfo? songInfo}) =>
      (super.noSuchMethod(
              Invocation.method(#addSongToPlaylist, [],
                  {#playlistInfo: playlistInfo, #songInfo: songInfo}),
              returnValue: Future<_i2.Either<_i6.Failure, void>>.value(
                  _FakeEither_0<_i6.Failure, void>()))
          as _i5.Future<_i2.Either<_i6.Failure, void>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, void>> removeSongToPlaylist(
          {_i7.PlaylistInfo? playlistInfo, _i7.SongInfo? songInfo}) =>
      (super.noSuchMethod(
              Invocation.method(#removeSongToPlaylist, [],
                  {#playlistInfo: playlistInfo, #songInfo: songInfo}),
              returnValue: Future<_i2.Either<_i6.Failure, void>>.value(
                  _FakeEither_0<_i6.Failure, void>()))
          as _i5.Future<_i2.Either<_i6.Failure, void>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.PlaylistInfo>> createPlaylist(
          {String? playlistName}) =>
      (super.noSuchMethod(
          Invocation.method(#createPlaylist, [], {#playlistName: playlistName}),
          returnValue: Future<_i2.Either<_i6.Failure, _i7.PlaylistInfo>>.value(
              _FakeEither_0<_i6.Failure, _i7.PlaylistInfo>())) as _i5
          .Future<_i2.Either<_i6.Failure, _i7.PlaylistInfo>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, void>> removePlaylist(
          {_i7.PlaylistInfo? playlistInfo}) =>
      (super.noSuchMethod(
          Invocation.method(#removePlaylist, [], {#playlistInfo: playlistInfo}),
          returnValue: Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>())) as _i5
          .Future<_i2.Either<_i6.Failure, void>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AudioQueryDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioQueryDataSource extends _i1.Mock
    implements _i8.AudioQueryDataSource {
  MockAudioQueryDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.SongInfoModel> getSong({String? id}) => (super.noSuchMethod(
          Invocation.method(#getSong, [], {#id: id}),
          returnValue: Future<_i3.SongInfoModel>.value(_FakeSongInfoModel_1()))
      as _i5.Future<_i3.SongInfoModel>);
  @override
  _i5.Future<_i3.AlbumInfoModel> getAlbum({String? id}) =>
      (super.noSuchMethod(Invocation.method(#getAlbum, [], {#id: id}),
              returnValue:
                  Future<_i3.AlbumInfoModel>.value(_FakeAlbumInfoModel_2()))
          as _i5.Future<_i3.AlbumInfoModel>);
  @override
  _i5.Future<List<_i3.SongInfoModel>> getAllSongs() =>
      (super.noSuchMethod(Invocation.method(#getAllSongs, []),
              returnValue:
                  Future<List<_i3.SongInfoModel>>.value(<_i3.SongInfoModel>[]))
          as _i5.Future<List<_i3.SongInfoModel>>);
  @override
  _i5.Future<List<_i3.SongInfoModel>> getSongsByAlbum({String? albumid}) =>
      (super.noSuchMethod(
              Invocation.method(#getSongsByAlbum, [], {#albumid: albumid}),
              returnValue:
                  Future<List<_i3.SongInfoModel>>.value(<_i3.SongInfoModel>[]))
          as _i5.Future<List<_i3.SongInfoModel>>);
  @override
  _i5.Future<List<_i3.SongInfoModel>> getSongsByPlaylist(
          {_i7.PlaylistInfo? playlistInfo}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getSongsByPlaylist, [], {#playlistInfo: playlistInfo}),
              returnValue:
                  Future<List<_i3.SongInfoModel>>.value(<_i3.SongInfoModel>[]))
          as _i5.Future<List<_i3.SongInfoModel>>);
  @override
  _i5.Future<List<_i3.SongInfoModel>> searchAllSongs({String? queryString}) =>
      (super.noSuchMethod(
          Invocation.method(#searchAllSongs, [], {#queryString: queryString}),
          returnValue: Future<List<_i3.SongInfoModel>>.value(
              <_i3.SongInfoModel>[])) as _i5.Future<List<_i3.SongInfoModel>>);
  @override
  _i5.Future<List<_i3.AlbumInfoModel>> getAllAlbums() => (super.noSuchMethod(
          Invocation.method(#getAllAlbums, []),
          returnValue:
              Future<List<_i3.AlbumInfoModel>>.value(<_i3.AlbumInfoModel>[]))
      as _i5.Future<List<_i3.AlbumInfoModel>>);
  @override
  _i5.Future<List<_i3.AlbumInfoModel>> searchAllAlbums({String? queryString}) =>
      (super.noSuchMethod(
          Invocation.method(#searchAllAlbums, [], {#queryString: queryString}),
          returnValue: Future<List<_i3.AlbumInfoModel>>.value(
              <_i3.AlbumInfoModel>[])) as _i5.Future<List<_i3.AlbumInfoModel>>);
  @override
  _i5.Future<List<_i3.PlaylistInfoModel>> getAllPlaylists() =>
      (super.noSuchMethod(Invocation.method(#getAllPlaylists, []),
              returnValue: Future<List<_i3.PlaylistInfoModel>>.value(
                  <_i3.PlaylistInfoModel>[]))
          as _i5.Future<List<_i3.PlaylistInfoModel>>);
  @override
  _i5.Future<void> addSongToPlaylist(
          {_i7.PlaylistInfo? playlistInfo, _i7.SongInfo? songInfo}) =>
      (super.noSuchMethod(
          Invocation.method(#addSongToPlaylist, [],
              {#playlistInfo: playlistInfo, #songInfo: songInfo}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> removeSongToPlaylist(
          {_i7.PlaylistInfo? playlistInfo, _i7.SongInfo? songInfo}) =>
      (super.noSuchMethod(
          Invocation.method(#removeSongToPlaylist, [],
              {#playlistInfo: playlistInfo, #songInfo: songInfo}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<_i3.PlaylistInfoModel> createPlaylist({String? playlistName}) =>
      (super.noSuchMethod(
          Invocation.method(#createPlaylist, [], {#playlistName: playlistName}),
          returnValue: Future<_i3.PlaylistInfoModel>.value(
              _FakePlaylistInfoModel_3())) as _i5
          .Future<_i3.PlaylistInfoModel>);
  @override
  _i5.Future<void> removePlaylist({_i7.PlaylistInfo? playlistInfo}) =>
      (super.noSuchMethod(
          Invocation.method(#removePlaylist, [], {#playlistInfo: playlistInfo}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Utils].
///
/// See the documentation for Mockito's code generation for more information.
class MockUtils extends _i1.Mock implements _i9.Utils {
  MockUtils() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() => super.toString();
}
