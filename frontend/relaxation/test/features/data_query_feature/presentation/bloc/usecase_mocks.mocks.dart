// Mocks generated by Mockito 5.0.15 from annotations
// in relaxation/test/features/data_query_feature/presentation/bloc/usecase_mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:relaxation/features/data_query_feature/domain/usecases/add_song_to_playlist.dart'
    as _i13;
import 'package:relaxation/features/data_query_feature/domain/usecases/create_playlist.dart'
    as _i16;
import 'package:relaxation/features/data_query_feature/domain/usecases/get_album.dart'
    as _i3;
import 'package:relaxation/features/data_query_feature/domain/usecases/get_all_albums.dart'
    as _i5;
import 'package:relaxation/features/data_query_feature/domain/usecases/get_all_playlists.dart'
    as _i6;
import 'package:relaxation/features/data_query_feature/domain/usecases/get_all_songs.dart'
    as _i7;
import 'package:relaxation/features/data_query_feature/domain/usecases/get_song.dart'
    as _i8;
import 'package:relaxation/features/data_query_feature/domain/usecases/get_songs_by_album.dart'
    as _i9;
import 'package:relaxation/features/data_query_feature/domain/usecases/get_songs_by_playlist.dart'
    as _i10;
import 'package:relaxation/features/data_query_feature/domain/usecases/remove_playlist.dart'
    as _i15;
import 'package:relaxation/features/data_query_feature/domain/usecases/remove_song_to_playlist.dart'
    as _i14;
import 'package:relaxation/features/data_query_feature/domain/usecases/search_all_albums.dart'
    as _i11;
import 'package:relaxation/features/data_query_feature/domain/usecases/search_all_songs.dart'
    as _i12;
import 'package:relaxation/features/data_query_feature/domain/usecases/usecase_import.dart'
    as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeAudioQueryRepository_0 extends _i1.Fake
    implements _i2.AudioQueryRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [UGetAlbum].
///
/// See the documentation for Mockito's code generation for more information.
class MockUGetAlbum extends _i1.Mock implements _i3.UGetAlbum {
  MockUGetAlbum() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioQueryRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeAudioQueryRepository_0()) as _i2.AudioQueryRepository);
  @override
  _i4.Future<_i2.Either<_i2.Failure, _i2.AlbumInfo>> call({String? id}) =>
      (super.noSuchMethod(Invocation.method(#call, [], {#id: id}),
              returnValue: Future<_i2.Either<_i2.Failure, _i2.AlbumInfo>>.value(
                  _FakeEither_1<_i2.Failure, _i2.AlbumInfo>()))
          as _i4.Future<_i2.Either<_i2.Failure, _i2.AlbumInfo>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UGetAllAlbums].
///
/// See the documentation for Mockito's code generation for more information.
class MockUGetAllAlbums extends _i1.Mock implements _i5.UGetAllAlbums {
  MockUGetAllAlbums() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioQueryRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeAudioQueryRepository_0()) as _i2.AudioQueryRepository);
  @override
  _i4.Future<_i2.Either<_i2.Failure, List<_i2.AlbumInfo>>> call() =>
      (super.noSuchMethod(Invocation.method(#call, []),
              returnValue:
                  Future<_i2.Either<_i2.Failure, List<_i2.AlbumInfo>>>.value(
                      _FakeEither_1<_i2.Failure, List<_i2.AlbumInfo>>()))
          as _i4.Future<_i2.Either<_i2.Failure, List<_i2.AlbumInfo>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UGetAllPlaylists].
///
/// See the documentation for Mockito's code generation for more information.
class MockUGetAllPlaylists extends _i1.Mock implements _i6.UGetAllPlaylists {
  MockUGetAllPlaylists() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioQueryRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeAudioQueryRepository_0()) as _i2.AudioQueryRepository);
  @override
  _i4.Future<_i2.Either<_i2.Failure, List<_i2.PlaylistInfo>>> call() =>
      (super.noSuchMethod(Invocation.method(#call, []),
              returnValue:
                  Future<_i2.Either<_i2.Failure, List<_i2.PlaylistInfo>>>.value(
                      _FakeEither_1<_i2.Failure, List<_i2.PlaylistInfo>>()))
          as _i4.Future<_i2.Either<_i2.Failure, List<_i2.PlaylistInfo>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UGetAllSongs].
///
/// See the documentation for Mockito's code generation for more information.
class MockUGetAllSongs extends _i1.Mock implements _i7.UGetAllSongs {
  MockUGetAllSongs() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioQueryRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeAudioQueryRepository_0()) as _i2.AudioQueryRepository);
  @override
  _i4.Future<_i2.Either<_i2.Failure, List<_i2.SongInfo>>> call() => (super
          .noSuchMethod(Invocation.method(#call, []),
              returnValue:
                  Future<_i2.Either<_i2.Failure, List<_i2.SongInfo>>>.value(
                      _FakeEither_1<_i2.Failure, List<_i2.SongInfo>>()))
      as _i4.Future<_i2.Either<_i2.Failure, List<_i2.SongInfo>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UGetSong].
///
/// See the documentation for Mockito's code generation for more information.
class MockUGetSong extends _i1.Mock implements _i8.UGetSong {
  MockUGetSong() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioQueryRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeAudioQueryRepository_0()) as _i2.AudioQueryRepository);
  @override
  _i4.Future<_i2.Either<_i2.Failure, _i2.SongInfo>> call({String? id}) =>
      (super.noSuchMethod(Invocation.method(#call, [], {#id: id}),
              returnValue: Future<_i2.Either<_i2.Failure, _i2.SongInfo>>.value(
                  _FakeEither_1<_i2.Failure, _i2.SongInfo>()))
          as _i4.Future<_i2.Either<_i2.Failure, _i2.SongInfo>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UGetSongsByAlbum].
///
/// See the documentation for Mockito's code generation for more information.
class MockUGetSongsByAlbum extends _i1.Mock implements _i9.UGetSongsByAlbum {
  MockUGetSongsByAlbum() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioQueryRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeAudioQueryRepository_0()) as _i2.AudioQueryRepository);
  @override
  _i4.Future<_i2.Either<_i2.Failure, List<_i2.SongInfo>>> call(
          {String? albumid}) =>
      (super.noSuchMethod(Invocation.method(#call, [], {#albumid: albumid}),
              returnValue:
                  Future<_i2.Either<_i2.Failure, List<_i2.SongInfo>>>.value(
                      _FakeEither_1<_i2.Failure, List<_i2.SongInfo>>()))
          as _i4.Future<_i2.Either<_i2.Failure, List<_i2.SongInfo>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UGetSongsByPlaylist].
///
/// See the documentation for Mockito's code generation for more information.
class MockUGetSongsByPlaylist extends _i1.Mock
    implements _i10.UGetSongsByPlaylist {
  MockUGetSongsByPlaylist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioQueryRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeAudioQueryRepository_0()) as _i2.AudioQueryRepository);
  @override
  _i4.Future<_i2.Either<_i2.Failure, List<_i2.SongInfo>>> call(
          {_i2.PlaylistInfo? playlistInfo}) =>
      (super.noSuchMethod(
              Invocation.method(#call, [], {#playlistInfo: playlistInfo}),
              returnValue:
                  Future<_i2.Either<_i2.Failure, List<_i2.SongInfo>>>.value(
                      _FakeEither_1<_i2.Failure, List<_i2.SongInfo>>()))
          as _i4.Future<_i2.Either<_i2.Failure, List<_i2.SongInfo>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [USearchAllAlbums].
///
/// See the documentation for Mockito's code generation for more information.
class MockUSearchAllAlbums extends _i1.Mock implements _i11.USearchAllAlbums {
  MockUSearchAllAlbums() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioQueryRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeAudioQueryRepository_0()) as _i2.AudioQueryRepository);
  @override
  _i4.Future<_i2.Either<_i2.Failure, List<_i2.AlbumInfo>>> call(
          {String? query}) =>
      (super.noSuchMethod(Invocation.method(#call, [], {#query: query}),
              returnValue:
                  Future<_i2.Either<_i2.Failure, List<_i2.AlbumInfo>>>.value(
                      _FakeEither_1<_i2.Failure, List<_i2.AlbumInfo>>()))
          as _i4.Future<_i2.Either<_i2.Failure, List<_i2.AlbumInfo>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [USearchAllSongs].
///
/// See the documentation for Mockito's code generation for more information.
class MockUSearchAllSongs extends _i1.Mock implements _i12.USearchAllSongs {
  MockUSearchAllSongs() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioQueryRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeAudioQueryRepository_0()) as _i2.AudioQueryRepository);
  @override
  _i4.Future<_i2.Either<_i2.Failure, List<_i2.SongInfo>>> call(
          {String? query}) =>
      (super.noSuchMethod(Invocation.method(#call, [], {#query: query}),
              returnValue:
                  Future<_i2.Either<_i2.Failure, List<_i2.SongInfo>>>.value(
                      _FakeEither_1<_i2.Failure, List<_i2.SongInfo>>()))
          as _i4.Future<_i2.Either<_i2.Failure, List<_i2.SongInfo>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UAddSongsToPlaylist].
///
/// See the documentation for Mockito's code generation for more information.
class MockUAddSongsToPlaylist extends _i1.Mock
    implements _i13.UAddSongsToPlaylist {
  MockUAddSongsToPlaylist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioQueryRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeAudioQueryRepository_0()) as _i2.AudioQueryRepository);
  @override
  _i4.Future<_i2.Either<_i2.Failure, void>> call(
          {_i2.PlaylistInfo? playlistInfo, _i2.SongInfo? songInfo}) =>
      (super.noSuchMethod(
          Invocation.method(
              #call, [], {#playlistInfo: playlistInfo, #songInfo: songInfo}),
          returnValue: Future<_i2.Either<_i2.Failure, void>>.value(
              _FakeEither_1<_i2.Failure, void>())) as _i4
          .Future<_i2.Either<_i2.Failure, void>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [URemoveSongsToPlaylist].
///
/// See the documentation for Mockito's code generation for more information.
class MockURemoveSongsToPlaylist extends _i1.Mock
    implements _i14.URemoveSongsToPlaylist {
  MockURemoveSongsToPlaylist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioQueryRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeAudioQueryRepository_0()) as _i2.AudioQueryRepository);
  @override
  _i4.Future<_i2.Either<_i2.Failure, void>> call(
          {_i2.PlaylistInfo? playlistInfo, _i2.SongInfo? songInfo}) =>
      (super.noSuchMethod(
          Invocation.method(
              #call, [], {#playlistInfo: playlistInfo, #songInfo: songInfo}),
          returnValue: Future<_i2.Either<_i2.Failure, void>>.value(
              _FakeEither_1<_i2.Failure, void>())) as _i4
          .Future<_i2.Either<_i2.Failure, void>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [URemovePlaylist].
///
/// See the documentation for Mockito's code generation for more information.
class MockURemovePlaylist extends _i1.Mock implements _i15.URemovePlaylist {
  MockURemovePlaylist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioQueryRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeAudioQueryRepository_0()) as _i2.AudioQueryRepository);
  @override
  _i4.Future<_i2.Either<_i2.Failure, void>> call(
          {_i2.PlaylistInfo? playlistInfo}) =>
      (super.noSuchMethod(
              Invocation.method(#call, [], {#playlistInfo: playlistInfo}),
              returnValue: Future<_i2.Either<_i2.Failure, void>>.value(
                  _FakeEither_1<_i2.Failure, void>()))
          as _i4.Future<_i2.Either<_i2.Failure, void>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UCreatePlaylist].
///
/// See the documentation for Mockito's code generation for more information.
class MockUCreatePlaylist extends _i1.Mock implements _i16.UCreatePlaylist {
  MockUCreatePlaylist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioQueryRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeAudioQueryRepository_0()) as _i2.AudioQueryRepository);
  @override
  _i4.Future<_i2.Either<_i2.Failure, _i2.PlaylistInfo>> call({String? name}) =>
      (super.noSuchMethod(Invocation.method(#call, [], {#name: name}),
          returnValue: Future<_i2.Either<_i2.Failure, _i2.PlaylistInfo>>.value(
              _FakeEither_1<_i2.Failure, _i2.PlaylistInfo>())) as _i4
          .Future<_i2.Either<_i2.Failure, _i2.PlaylistInfo>>);
  @override
  String toString() => super.toString();
}
